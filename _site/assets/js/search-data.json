{"0": {
    "doc": "ReadMe",
    "title": "Introduction to Computational Thinking with Data",
    "content": "UC Berkeley . ",
    "url": "http://localhost:4000/su22/README/#introduction-to-computational-thinking-with-data",
    "relUrl": "/README/#introduction-to-computational-thinking-with-data"
  },"1": {
    "doc": "ReadMe",
    "title": "Offerings",
    "content": ". | Summer 2022 | Summer 2021 | Spring 2021 | . From the course catalog: This course is an introduction to computational thinking and quantitative reasoning, designed to prepare students for further coursework in data science, computer science, and statistics (in particular, Foundations of Data Science, Data C8). This course emphasizes the use of computation to gain insight about quantitative problems with real data from the social sciences. ",
    "url": "http://localhost:4000/su22/README/#offerings",
    "relUrl": "/README/#offerings"
  },"2": {
    "doc": "ReadMe",
    "title": "ReadMe",
    "content": " ",
    "url": "http://localhost:4000/su22/README/",
    "relUrl": "/README/"
  },"3": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": "Announcements are stored in the _announcements directory and rendered according to the layout file, _layouts/announcement.html. ",
    "url": "http://localhost:4000/su22/announcements/",
    "relUrl": "/announcements/"
  },"4": {
    "doc": "Announcements",
    "title": "Welcome to Data 6!",
    "content": "Jun 30 &middot; 0 min read We‚Äôre excited to be teaching Data 6 this summer, and hope you‚Äôll enjoy this class. This website will serve as a ‚Äòhome base‚Äô for the course, and will have all of the materials and assignments you‚Äôll need. We recommend bookmarking the website for easy access. Additionally, please make sure you have access to the following course resources: . | Data 6 Ed Discussion | Data 6 Gradescope | . If you don‚Äôt have access to either of the websites, please email jweichert@berkeley.edu . Best, James and Will . ",
    "url": "http://localhost:4000/su22/announcements/",
    "relUrl": "/announcements/"
  },"5": {
    "doc": "Home",
    "title": "Introduction to Computational Thinking with Data üìä",
    "content": "UC Berkeley, Summer 2022 . Instructors: James Weichert (jweichert@berkeley.edu), Will Furtado (willfurtado@berkeley.edu) . ",
    "url": "http://localhost:4000/su22/index.html#introduction-to-computational-thinking-with-data-",
    "relUrl": "/index.html#introduction-to-computational-thinking-with-data-"
  },"6": {
    "doc": "Home",
    "title": "Announcements",
    "content": " ",
    "url": "http://localhost:4000/su22/index.html#announcements",
    "relUrl": "/index.html#announcements"
  },"7": {
    "doc": "Home",
    "title": "Welcome to Data 6!",
    "content": "Jun 30 &middot; 0 min read We‚Äôre excited to be teaching Data 6 this summer, and hope you‚Äôll enjoy this class. This website will serve as a ‚Äòhome base‚Äô for the course, and will have all of the materials and assignments you‚Äôll need. We recommend bookmarking the website for easy access. Additionally, please make sure you have access to the following course resources: . | Data 6 Ed Discussion | Data 6 Gradescope | . If you don‚Äôt have access to either of the websites, please email jweichert@berkeley.edu . Best, James and Will . ",
    "url": "http://localhost:4000/su22/index.html",
    "relUrl": "/index.html"
  },"8": {
    "doc": "Home",
    "title": "Week 1 ‚Äî Introduction to Python",
    "content": "Jul 5 1 Introduction, Course Overview, Jupyter Basics Slides ‚Ä¢ Code Optional Reading Jul 6 2 Variables and Types Lab 1 Using Jupyter Notebooks Jul 7 3 NumPy and Data Homework 1 Introduction to Python ¬†Due Jul 14 @ 11:59PM Jul 8 Discussion 1 Health Data ",
    "url": "http://localhost:4000/su22/index.html#week-1-introduction-to-python",
    "relUrl": "/index.html#week-1-introduction-to-python"
  },"9": {
    "doc": "Home",
    "title": "Week 2 ‚Äî Visualizing Data",
    "content": "Jul 11 4 Table Fundamentals, Introduction to Visualization Optional Reading Jul 12 5 Visualizing Categorical Variables Lab 2 Visualization Fundamentals Jul 13 6 Visualizing Numerical Variables Jul 14 7 Visualizing Two Numerical Variables Lab 3 More Visualization Jul 15 Discussion 2 Human Contexts and Ethics 8 Quiz Review Homework 2 Data Visualization ¬†Due Jul 21 @ 11:59PM ",
    "url": "http://localhost:4000/su22/index.html#week-2-visualizing-data",
    "relUrl": "/index.html#week-2-visualizing-data"
  },"10": {
    "doc": "Home",
    "title": "Week 3 ‚Äî Tables",
    "content": "Jul 18 Quiz Quiz 1: Python and Visualization 9 Row Manipulation Optional Reading Jul 19 10 Row Methods, Joining Tables Lab 4 Tables Jul 20 11 Grouping, Pivoting, Functions (I) Jul 21 12 Applying Lab 5 More Table Methods Jul 22 Discussion 3 Algorithmic Bias Homework 3 Data Visualization ¬†Due Jul 28 @ 11:59PM ",
    "url": "http://localhost:4000/su22/index.html#week-3-tables",
    "relUrl": "/index.html#week-3-tables"
  },"11": {
    "doc": "Home",
    "title": "Week 4 ‚Äî Python Functions and Control",
    "content": "Jul 25 13 Functions (II), Comparisons, Booleans Optional Reading Jul 26 14 Control Lab 6 Functions Jul 27 15 For Loops Jul 28 16 Advanced For-Loops Lab 7 Python Fundamentals Jul 29 Discussion 4 Privacy 17 Quiz Review Homework 7 Python Fundamentals ¬†Due Aug 2 @ 11:59PM ",
    "url": "http://localhost:4000/su22/index.html#week-4-python-functions-and-control",
    "relUrl": "/index.html#week-4-python-functions-and-control"
  },"12": {
    "doc": "Home",
    "title": "Week 5 ‚Äî More Python",
    "content": "Aug 1 Quiz Quiz 2: Tables, Functions and Loops Lab 8 For Loops Aug 2 18 File Formats, Dictionaries (I) Aug 3 19 Dictionaries (II) Lab 9 Dictionaries Aug 4 20 Case Study, Maps Aug 5 Discussion 5 Data in Elections Homework 5 Data Visualization ¬†Due Aug 10 @ 11:59PM ",
    "url": "http://localhost:4000/su22/index.html#week-5-more-python",
    "relUrl": "/index.html#week-5-more-python"
  },"13": {
    "doc": "Home",
    "title": "Week 6 ‚Äî Simulations and Conclusion",
    "content": "Aug 8 21 Case Study Optional Reading Aug 9 22 Randomness and Simulation, Finding and Using Data Lab 10 Simultation and Sampling Aug 10 23 Conclusion and Next Steps Aug 11 24 Final Review Aug 12 Exam Final Exam (In-Class) ",
    "url": "http://localhost:4000/su22/index.html#week-6-simulations-and-conclusion",
    "relUrl": "/index.html#week-6-simulations-and-conclusion"
  },"14": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/su22/index.html",
    "relUrl": "/index.html"
  },"15": {
    "doc": "Python Reference",
    "title": "Python Reference üêç",
    "content": " ",
    "url": "http://localhost:4000/su22/reference/#python-reference-",
    "relUrl": "/reference/#python-reference-"
  },"16": {
    "doc": "Python Reference",
    "title": "Table of contents",
    "content": ". | Understanding the Python Reference . | The Anatomy of a Function | How to Read These Tables | . | Built-In Python Functions | NumPy Array Functions | Tables and Table Methods | Visualization Functions | Table.where Predicates | More Documentation | . ",
    "url": "http://localhost:4000/su22/reference/#table-of-contents",
    "relUrl": "/reference/#table-of-contents"
  },"17": {
    "doc": "Python Reference",
    "title": "Understanding the Python Reference",
    "content": "If you‚Äôre new to reading documentation, looking at the Data 6 Python Reference might feel a little overwhelming, but don‚Äôt worry ‚Äî the point of this class is not to memorize all of these functions or their arguments. For exams and quizzes, you will be provided with a reference sheet that contains all of the functions you may need on the exam. However, we do expect you to understand how to use the Python Reference to understand new functions, and to help with debugging when things go wrong. Learning how to read and understand documentation is a key to becoming a good data scientist. In fact, even course staff continue to use the Python Reference to refresh their memory about certain functions. Of course, the Python Reference can only provide information about the basics of the functions you‚Äôll use in Data 6. The best knowledge about functions comes from using these functions in code you write in labs or homeworks. If you get stuck when using a certain function, we encourage you to come to office hours or ask a question on Ed. The Anatomy of a Function . def my_function(num): return num ** 3 In the function above, my_function is the name of the function, which takes one argument called num. The data type of the input is an int or float, and the function returns the number raised to the power 3, which is also an int or float. How to Read These Tables . | The Function column tells you how to call the function and what arguments it accepts. Everything written in this font is code or refers to a particular argument in the function (e.g. num in np.sqrt(num)). | The Description column gives you a brief description of what the function does, including what each argument is used for | The Input column tells you what data type each argument needs to be. If you‚Äôre getting a TypeError, it might be because your inputs are of the wrong type. Data types are indicates in bold (e.g. string or Table). | The Output column tells you what the function returns and what data type it is. | . ",
    "url": "http://localhost:4000/su22/reference/#understanding-the-python-reference",
    "relUrl": "/reference/#understanding-the-python-reference"
  },"18": {
    "doc": "Python Reference",
    "title": "Built-In Python Functions",
    "content": "| Function | Description | Input | Output | . | str(val) | Converts val to a string | A value of any type (int, float, NoneType, etc.) | The value as a string | . | int(num) | Converts num to an int | A numerical value (represented as a string or float) | The value as an int | . | float(num) | Converts num to a float | A numerical value (represented as a string or int) | The value as a float | . | len(arr) | Returns the length of arr | array or list | int: the length of the array or list | . | max(arr) | Returns the maximum value in arr | array or list | The maximum value the array (usually an int) | . | min(arr) | Returns the minimum value in arr | array or list | The minimum value the array (usually an int) | . | sum(arr) | Returns the sum of the values in arr | array or list | int or float: the sum of the values in the array | . | abs(num) | Returns the absolute value of num | int or float | int or float | . ",
    "url": "http://localhost:4000/su22/reference/#built-in-python-functions",
    "relUrl": "/reference/#built-in-python-functions"
  },"19": {
    "doc": "Python Reference",
    "title": "NumPy Array Functions",
    "content": "| Function | Description | Input | Output | . | np.mean(arr) or np.average(arr) | Calculates the average value of arr | An array of numbers | float: The average of the array | . | np.sqrt(num) | Calculates the square root of num | int or float | float : the square root of the number | . | np.arange(stop), np.arange(start, stop), or np.arange(start, stop, step) | Creates an array of sequential numbers starting at start, going up in increments of step, and going up to but excluding stop. Default start is 0, default step is 1 | int or float | array | . ",
    "url": "http://localhost:4000/su22/reference/#numpy-array-functions",
    "relUrl": "/reference/#numpy-array-functions"
  },"20": {
    "doc": "Python Reference",
    "title": "Tables and Table Methods",
    "content": "| Function | Description | Input | Output | . | Table() | Creates an empty table, usually to extend with data | None | An empty Table | . | tbl.with_column(name, values) or tbl.with_columns(n1, v1, n2, v2, ...) | Adds an extra column onto tbl with the label name and values as the column values | 1. string: name of the new column 2. array: values in the column | Table: a copy of the original table with the new column(s) | . | tbl.column(col) | Returns the values in a column | string or int: the column name or index | array: the values in that column | . | tbl.num_rows | Compute the number of rows in tbl | None | int: the number of rows in the table | . | tbl.num_columns | Compute the number of columns in tbl | None | int: the number of columns in the table | . | tbl.labels | Returns the labels in tbl | None | array: the names of each column as strings | . | tbl.select(col1, col2, ...) | Creates a copy of tbl only with the selected columns | string or int: the column name(s) or index(es) to be included in the table | Table with the selected columns | . | tbl.drop(col1, col2, ...) | Creates a copy of tbl without the selected columns | string or int: the column name(s) or index(es) to be dropped from the table | Table without the selected columns | . | tbl.show(n) | Displays the first n rows of tbl. If no argument is specified, the function defaults to showing the entire table | (Optional) int: number of rows to be displayed | None (table is displayed) | . | tbl.sort(column_name) | Sorts the rows of tbl by the values in the column_name column. Defaults to ascending order unless the optional argument descending=True is included. | 1. string or int: name or index of the column to sort 2. (Optional) descending=True | Table: a copy of the original table with the column sorted | . | tbl.where(column, predicate) | Creates a copy of tbl containing only the rows where the value of column matches the predicate. See Table.where predicates below. | 1. string or int: column name or index 2. are.(...) predicate | Table: a copy of the originaltable with only the rows that match the predicate | . | tbl.apply(function) or tbl.apply(function, col1, col2, ...) | Returns an array of values resulting from applying a function to each item in a column. | 1. Function: function to apply to column 2. (Optional) string or int: the column name(s) or index(es) to apply the function to | array containing an element for each value in the original column after applying the function to it | . | tbl.group(column_or_columns, function) | Groups rows in tbl by unique values or combinations of values in a column(s). Multiple columns must be entered as an array of strings. Values in the other columns are aggregated by count (by default) or the optional argument function. You can visualize the group function here. | 1. string or array of strings: column(s) on which to group 2. (Optional) Function: function to aggregate values in cells (defaults to counting rows) | Table a new groupped table | . | tbl.pivot(col1, col2) or tbl.pivot(col1, col2, values, collect) | Creates a pivot table where each unique value in col1 has its own column and each unique value in col2 has its own row. Counts or aggregates values from a third column, collected with some function. If the values and collect arguments are not included, pivot defaults to returning counts in the cells. You can visualize the pivot function here. | 1. string: name of the column in tbl whose unique values will make up the columns of the pivot table 2. string: name of column in tbl whose unique values will make up the rows of the pivot table 3. (Optional) string: name of the column in tbl that describes the values of cells in the pivot table 4. (Optional) Function: how the values are collected (e.g. sum or np.mean) | Table: a new pivot table | . | tblA.join(colA, tblB) or tblA.join(colA, tblB, colB) | Generate a table with the columns of tblA and tblB, containing rows for all values in colA and colB that appear in tblA and tblB, respectively. By default, colB is the same value as colA. colA and colB must be strings specifying column names. | 1. string: name of column in tblA with values to join on 2. Table: the other table 3. (Optional) string: the name of the shared column in tblB, if column names are different between the tables | Table: a new combined table | . ",
    "url": "http://localhost:4000/su22/reference/#tables-and-table-methods",
    "relUrl": "/reference/#tables-and-table-methods"
  },"21": {
    "doc": "Python Reference",
    "title": "Visualization Functions",
    "content": "| Function | Description | Input | Output | . | tbl.barh(categories) or tbl.barh(categories, values) | Displays a horizontal bar chart with bars for each category in the column categories. values specifies the column corresponding to the size of each bar, but is unnecessary if the table only has two columns | 1. string: name of the column with categories 2. (Optional) string: name of the column with values corresponding to the categories | None: draws a bar chart | . | tbl.hist(column) | Generates a histogram of the numerical values in column. | string: name of the column | None: draws a histogram | . | tbl.plot(x_column, y_column) or tbl.plot(x_column) | Draws a line plot consisting of one point for each row in tbl. If only x_column is specified, plot will plot the rest of the columns on the y-axis with different colored lines. | 1. string: name of the column on the x-axis 2. string: name of the column on the y-axis | None: draws a line graph | . | tbl.scatter(x_column, y_column) | Draws a scatter plot consisting of one point for each row in tbl. The optional argument fit_line=True can be included to draw a line of best fit through the scatter plot. | 1. string: name of the column on the x-axis 2. string: name of the column on the y-axis 3. (Optional) fit_line=True | None: draws a scatter plot | . ",
    "url": "http://localhost:4000/su22/reference/#visualization-functions",
    "relUrl": "/reference/#visualization-functions"
  },"22": {
    "doc": "Python Reference",
    "title": "Table.where Predicates",
    "content": "These functions can be passed in as the second argument to tbl.where(..) and act as a condition by which to select rows from tbl. | Predicate | Description | . | are.equal_to(Z) | Equal to Z (can be an int, float or string) | . | are.not_equal_to(Z) | Not equal to ‚ÄòZ‚Äô can be a number (int or float) or a string) | . | are.above(x) | Greater than x | . | are.above_or_equal_to(x) | Greater than or equal to x | . | are.below(x) | Less than x | . | are.below_or_equal_to(x) | Less than or equal to x | . | are.between(x,y) | Greater than or equal to x and less than y | . | are.between_or_equal_to(x,y) | Greater than or equal to x, and less than or equal to y | . | are.strictly_between(x,y) | Greater than x and less than y | . | are.contained_in(A) | True if it is a substring of A (if A is a **string**) or an element of A (if A` is an array) | . | are.containing(S) | Contains the string S | . ",
    "url": "http://localhost:4000/su22/reference/#tablewhere-predicates",
    "relUrl": "/reference/#tablewhere-predicates"
  },"23": {
    "doc": "Python Reference",
    "title": "More Documentation",
    "content": "The Data 6 Python reference guide is based on the Data 8 Python Reference. More detailed Python documentation is available here. ",
    "url": "http://localhost:4000/su22/reference/#more-documentation",
    "relUrl": "/reference/#more-documentation"
  },"24": {
    "doc": "Python Reference",
    "title": "Python Reference",
    "content": " ",
    "url": "http://localhost:4000/su22/reference/",
    "relUrl": "/reference/"
  },"25": {
    "doc": "Resources",
    "title": "Resources",
    "content": " ",
    "url": "http://localhost:4000/su22/resources/",
    "relUrl": "/resources/"
  },"26": {
    "doc": "Resources",
    "title": "Table of contents",
    "content": ". | About | Lecture | Resources | Assignments | . ",
    "url": "http://localhost:4000/su22/resources/#table-of-contents",
    "relUrl": "/resources/#table-of-contents"
  },"27": {
    "doc": "Resources",
    "title": "About",
    "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Aliquam ut porttitor leo a diam. Erat nam at lectus urna duis convallis convallis tellus id. Pellentesque elit eget gravida cum sociis natoque penatibus et magnis. Ultrices vitae auctor eu augue ut lectus arcu. Morbi tristique senectus et netus et malesuada. Turpis tincidunt id aliquet risus feugiat in ante. Consequat interdum varius sit amet mattis vulputate enim nulla. Felis eget nunc lobortis mattis aliquam. Eu non diam phasellus vestibulum lorem sed risus. A condimentum vitae sapien pellentesque habitant morbi tristique. Orci dapibus ultrices in iaculis nunc sed augue lacus viverra. Proin sagittis nisl rhoncus mattis rhoncus urna neque. Dictum varius duis at consectetur lorem donec massa sapien. Blandit cursus risus at ultrices mi tempus imperdiet. Laoreet sit amet cursus sit amet dictum sit amet justo. Felis eget nunc lobortis mattis aliquam faucibus. Nam aliquam sem et tortor consequat. ",
    "url": "http://localhost:4000/su22/resources/#about",
    "relUrl": "/resources/#about"
  },"28": {
    "doc": "Resources",
    "title": "Lecture",
    "content": "Tempus iaculis urna id volutpat lacus laoreet non curabitur gravida. Vulputate dignissim suspendisse in est ante in. Massa vitae tortor condimentum lacinia quis vel. Gravida neque convallis a cras semper auctor. Pellentesque eu tincidunt tortor aliquam nulla. Quam adipiscing vitae proin sagittis nisl rhoncus mattis rhoncus urna. Sit amet purus gravida quis blandit turpis cursus in. Porttitor leo a diam sollicitudin tempor. Vel facilisis volutpat est velit egestas dui id ornare. Cum sociis natoque penatibus et magnis. Tristique magna sit amet purus gravida. Nibh sit amet commodo nulla facilisi nullam vehicula. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque. Id semper risus in hendrerit gravida. Sit amet justo donec enim diam vulputate ut pharetra sit. Vitae justo eget magna fermentum. Tellus in metus vulputate eu. Pellentesque id nibh tortor id aliquet lectus proin nibh nisl. Etiam erat velit scelerisque in dictum non consectetur a erat. Pellentesque eu tincidunt tortor aliquam nulla. ",
    "url": "http://localhost:4000/su22/resources/#lecture",
    "relUrl": "/resources/#lecture"
  },"29": {
    "doc": "Resources",
    "title": "Resources",
    "content": "Lacus viverra vitae congue eu. Suspendisse in est ante in nibh mauris cursus mattis. Nisl vel pretium lectus quam id leo in. Euismod lacinia at quis risus sed vulputate odio. Non enim praesent elementum facilisis. Aliquet sagittis id consectetur purus ut faucibus pulvinar elementum integer. Id interdum velit laoreet id donec ultrices tincidunt arcu. Urna molestie at elementum eu facilisis sed odio. Auctor urna nunc id cursus metus aliquam eleifend. Volutpat commodo sed egestas egestas fringilla phasellus. Libero nunc consequat interdum varius sit amet mattis. Imperdiet nulla malesuada pellentesque elit eget gravida cum sociis natoque. Tortor vitae purus faucibus ornare suspendisse. Auctor elit sed vulputate mi. ",
    "url": "http://localhost:4000/su22/resources/",
    "relUrl": "/resources/"
  },"30": {
    "doc": "Resources",
    "title": "Assignments",
    "content": "Vehicula ipsum a arcu cursus vitae congue. Etiam dignissim diam quis enim lobortis scelerisque fermentum dui. Risus sed vulputate odio ut enim blandit. Aliquam id diam maecenas ultricies mi eget. Id consectetur purus ut faucibus pulvinar elementum integer enim neque. Eget mi proin sed libero enim sed faucibus. Sem integer vitae justo eget magna fermentum iaculis. In mollis nunc sed id semper risus in. Sit amet risus nullam eget felis eget. Mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare massa eget. Nascetur ridiculus mus mauris vitae ultricies leo integer malesuada. Porta non pulvinar neque laoreet suspendisse interdum consectetur libero id. At varius vel pharetra vel turpis nunc eget. Scelerisque purus semper eget duis at tellus. ",
    "url": "http://localhost:4000/su22/resources/#assignments",
    "relUrl": "/resources/#assignments"
  },"31": {
    "doc": "Schedule",
    "title": "Weekly Schedule",
    "content": ". | 9:00 AM | 9:30 AM | 10:00 AM | 10:30 AM | 11:00 AM | 11:30 AM | 12:00 PM | 12:30 PM | 1:00 PM | 1:30 PM | 2:00 PM | 2:30 PM | 3:00 PM | 3:30 PM | 4:00 PM | 4:30 PM | 5:00 PM | 5:30 PM | . | ",
    "url": "http://localhost:4000/su22/schedule/#weekly-schedule",
    "relUrl": "/schedule/#weekly-schedule"
  },"32": {
    "doc": "Schedule",
    "title": "Monday",
    "content": ". | Lecture 10:10 AM‚Äì12:00 PM 212 Wheeler | . | ",
    "url": "http://localhost:4000/su22/schedule/",
    "relUrl": "/schedule/"
  },"33": {
    "doc": "Schedule",
    "title": "Tuesday",
    "content": ". | Lecture 10:10 AM‚Äì11:00 AM 212 Wheeler | Lab 11:10 AM‚Äì12:00 PM 212 Wheeler | Office Hours 1:00 PM‚Äì3:00 PM Evans 6 | . | ",
    "url": "http://localhost:4000/su22/schedule/",
    "relUrl": "/schedule/"
  },"34": {
    "doc": "Schedule",
    "title": "Wednesday",
    "content": ". | Lecture 10:10 AM‚Äì12:00 PM 212 Wheeler | . | ",
    "url": "http://localhost:4000/su22/schedule/",
    "relUrl": "/schedule/"
  },"35": {
    "doc": "Schedule",
    "title": "Thursday",
    "content": ". | Lecture 10:10 AM‚Äì11:00 AM 212 Wheeler | Lab 11:10 AM‚Äì12:00 PM 212 Wheeler | Office Hours 1:00 PM‚Äì3:00 PM Evans 6 | . | ",
    "url": "http://localhost:4000/su22/schedule/",
    "relUrl": "/schedule/"
  },"36": {
    "doc": "Schedule",
    "title": "Friday",
    "content": ". | Coffee Chats 9:10 AM‚Äì10:00 AM Caffe Strada | Discussion 10:10 AM‚Äì12:00 PM 105 &amp; 130 Dwinelle | . | . ",
    "url": "http://localhost:4000/su22/schedule/",
    "relUrl": "/schedule/"
  },"37": {
    "doc": "Schedule",
    "title": "Schedule",
    "content": " ",
    "url": "http://localhost:4000/su22/schedule/",
    "relUrl": "/schedule/"
  },"38": {
    "doc": "Staff",
    "title": "Staff",
    "content": "Staff information is stored in the _staffers directory and rendered according to the layout file, _layouts/staffer.html. ",
    "url": "http://localhost:4000/su22/staff/",
    "relUrl": "/staff/"
  },"39": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "James Weichert he/him . jweichert@berkeley.edu . Will Furtado . ",
    "url": "http://localhost:4000/su22/staff/#instructors",
    "relUrl": "/staff/#instructors"
  },"40": {
    "doc": "Staff",
    "title": "Undergraduate Student Instructors (uGSIs)",
    "content": "Joshua Alvarez . Sandra You she/her . xinyueyou@berkeley.edu . Hi! I‚Äôm Sandra and I‚Äôm a rising senior studying computer and data science. Besides academics I love hiking, music, and movies! Feel free to reach out to me to talk about data science and anything that interests you. Looking forward to meeting the data 6 community this summer! . ",
    "url": "http://localhost:4000/su22/staff/#undergraduate-student-instructors-ugsis",
    "relUrl": "/staff/#undergraduate-student-instructors-ugsis"
  },"41": {
    "doc": "Staff",
    "title": "Tutors",
    "content": "Leanne Bardoles . Sunya Abbasi . ",
    "url": "http://localhost:4000/su22/staff/#tutors",
    "relUrl": "/staff/#tutors"
  },"42": {
    "doc": "Syllabus",
    "title": "Syllabus",
    "content": " ",
    "url": "http://localhost:4000/su22/syllabus/",
    "relUrl": "/syllabus/"
  },"43": {
    "doc": "Syllabus",
    "title": "Table of contents",
    "content": ". | Welcome üëã | About üßê | Logistics üóì | Communication üí¨ | Technology üíª | Course Components . | Lecture | Lab | Homework | Office Hours and Ed | Quizzes and Exams | . | Policies . | Grading | Late Policy and Extensions | Academic Honesty | A Note on Letter Grades | . | Accommodations | Acknowledgements üôè | . ",
    "url": "http://localhost:4000/su22/syllabus/#table-of-contents",
    "relUrl": "/syllabus/#table-of-contents"
  },"44": {
    "doc": "Syllabus",
    "title": "Welcome\tüëã",
    "content": "Welcome to Data 6 Summer 2022! On behalf of Data 6 course staff, we‚Äôre excited to be teaching you this summer and hope you enjoy this class as much as we enjoy teaching it. Whether you‚Äôre a first-time college student or a seasoned veteran student, Data 6 is the perfect course to get started with coding and data science. This course is specifically designed without any prerequisites or assumed prior knowledge of computer science or statistics ‚Äî we will teach you everything you need to succeed in this class and prepare you for further data science and/or computer science classes. Along the way, you‚Äôll gain practical experience working with data and using Python code to extract useful insights from real-world data sets. Even if this is the last data science class you ever take, we hope you‚Äôll gain useful skills that you can apply to your own major or field of study, especially in the social sciences. One of‚Äîin our opinion‚Äîthe best parts of data science at Berkeley is the opportunity to learn from other students. All members of course staff are current undergraduates at UC Berkeley who have taken other data science classes and have experience teaching in classes like Data 8. Believe it or not, we were all once students taking introductory data science and computer science classes and just as confused and overwhelmed as you. We know what it‚Äôs like to step into a class feeling out of place, but also know what it‚Äôs like to finish a class feeling fulfilled and confident in your ability to succeed in data science and computer science at Berkeley. You are here for a reason ‚Äî you are all talented students and are all more than capable of being great data scientists, computer scientists, engineers, social scientists, and more. We want to do our best to support you this summer, so please don‚Äôt hesitate to reach out to any of us via email or Ed if you have any questions or concerns. We are continually revising course materials, assignments, and policies to improve the course and make this the best learning experience for you all. We welcome constructive feedback about what we can improve, and will try our best to incorporate your feedback into future lectures and assignments. Again, welcome to Data 6 ‚Äî we can‚Äôt wait to meet you and are super excited to be teaching you this summer! . Best, James and Will . ",
    "url": "http://localhost:4000/su22/syllabus/#welcome-",
    "relUrl": "/syllabus/#welcome-"
  },"45": {
    "doc": "Syllabus",
    "title": "About\tüßê",
    "content": "From the course catalog: Data 6 is an introduction to computational thinking and quantitative reasoning, designed to prepare students for further coursework in data science, computer science, and statistics (in particular, Foundations of Data Science, Data 8). This course emphasizes the use of computation to gain insight about quantitative problems with real data from the social sciences. Data 6 uses the Python programming language to teach computation. It also uses the Jupyter Notebook environment, which makes it easy to get started with programming without needing to use a text editor or terminal and is very popular in data science applications. Jupyter Notebooks are also used in courses like Data 8 and Data 100, so it‚Äôs helpful to get a head start using them. This class serves a different purpose than several other classes that may sound similar. Specifically: . | Data 8: Data 8 (Foundations of Data Science) is the first course in the data science sequence and a core requirement for the data science major and minor. While some of the topics are similar, Data 6 does not cover nearly as much statistics and inference as Data 8. Instead, we dive deeper into the mechanics of Python and how to use Python to generate insights from data using real-world data sets (mostly from the social sciences). After taking Data 6, you will be more than well-equipped to take (and succeed in) Data 8. | CS 10: CS 10 (The Beauty and Joy of Computing) is a similar class to Data 6 in that it is intended as an introduction to computing that assumes no prior experience with programming. However, CS 10 focuses less on Python and data science, and more on abstract ideas in computer science. It is a fantastic alternative (or complement) to Data 6. | CS 61A and CS 88: Both CS 61A (Structure and Interpretation of Computer Programs) and CS 88 (Computational Structures in Data Science) also teach Python, but serve a slightly different purpose than Data 6 ‚Äî namely, these courses are designed to introduce students to computer science, not to computing in data science. They cover the Python language in far greater detail than we will, but they do not cover how to work with real-world data. These courses are also substantially more fast-paced than Data 6, so they are excellent courses to take after Data 6 and/or Data 8. | . For the Summer 2022 iteration of Data 6, we have rearranged the order of some topics to more gradually ramp up to more advanced topics and give you the tools to work with real-world data earlier on in the semester. This new ordering means that some of the lectures will be out of sync with the ordering of materials from previous iterations of the course. If you want to review material from past semesters, just keep in mind that you may not have learned certain concepts yet, and that‚Äôs perfectly ok. The rough topic breakdown for this summer is as follows: . | Week 1: Introduction to Python and Jupyter Notebooks | Week 2: Data Visualization | Week 3: Working with real-world tabular data using the datascience Python library | Week 4: Python Functions and Control | Week 5: More Python (and more real-world applications) | Week 6: Probability and Simulation | . Lecture slides will be posted to the website right before each lecture to allow you to follow along if you want. You are also welcome to experiment with the concepts you‚Äôve learned by writing or editing code in the Jupyter Notebook we provide for each lecture (feel free to change it however you want ‚Äî we promise you won‚Äôt break anything). There is no one textbook that covers the content of this course the way we intend on covering, so all of the material you‚Äôll need to succeed in Data 6 will be presented in lecture, labs, homeworks, and discussions. If you want to review additional material, we will post optional readings from online textbooks for other courses (e.g. Data 8) along with most lectures. ",
    "url": "http://localhost:4000/su22/syllabus/#about-",
    "relUrl": "/syllabus/#about-"
  },"46": {
    "doc": "Syllabus",
    "title": "Logistics üóì",
    "content": "Lecture: Mondays &amp; Wednesdays, 10-12PM; Tuesdays &amp; Thursdays, 10AM-11AM in Wheeler 212 . Lab: (Usually) Tuesdays &amp; Thursdays, 11AM-12PM in Wheeler 212 . Discussion: Fridays, 10AM-12PM in Dwinelle 105 &amp; 130 . Office Hours (Optional): Tuesdays &amp; Thursdays, 1PM-3PM in Evans 6 . The full schedule is available on the Schedule page. ",
    "url": "http://localhost:4000/su22/syllabus/#logistics-",
    "relUrl": "/syllabus/#logistics-"
  },"47": {
    "doc": "Syllabus",
    "title": "Communication\tüí¨",
    "content": "This class does not use bCourses ‚Äî all of the materials and assignments for the class can be found on the Data 6 website. For class communication, we will be using Ed Discussion (or simply ‚ÄúEd,‚Äù as we will call it), the campus‚Äô discussion platform. Ed is where you will see announcements from course staff, ask questions about course material, and get help from staff and other students on assignments and concepts. Ed allows students to respond to questions from other students, so we hope you will help out your classmates by responding to questions you have the answer to, or asking questions about things you‚Äôre confused about. It‚Äôs likely that other students have many of the same questions as you! Please review the Ed etiquette guidelines before posting on Ed. You will be added to Ed automatically, but email James (jweichert@berkeley.edu) if you‚Äôre not sure how to access it. ",
    "url": "http://localhost:4000/su22/syllabus/#communication-",
    "relUrl": "/syllabus/#communication-"
  },"48": {
    "doc": "Syllabus",
    "title": "Technology üíª",
    "content": "We will be using several websites this semester. Here‚Äôs what they‚Äôre all used for: . | Course Website: where all content and assignments will be posted. | Ed: discussion forum where all announcements will be sent, and where all student-staff and student-student communication will occur. | DataHub: we use DataHub to host jupyter notebook assignments. Don‚Äôt worry too much about how this works, just access all assignments by clicking the link on the Data 6 website. | Gradescope: where all homeworks will be submitted and all grades will live. (We don‚Äôt use bCourses) | . Since all Data 6 material is accessible online, there are no requirements in terms of specific computer hardware. All you need is a laptop with internet and a web browser (Google Chrome or Firefox tend to work best). If you looking to purchase a laptop for college, Prof. Yan put together this helpful guide. Here are a few helpful resources when it comes to technology: . | Read this Berkeley IT website to learn how to connect to the campus WiFi network, Eduroam. | The Student Technology Equity Program provides free laptop loans for students. | . ",
    "url": "http://localhost:4000/su22/syllabus/#technology-",
    "relUrl": "/syllabus/#technology-"
  },"49": {
    "doc": "Syllabus",
    "title": "Course Components",
    "content": "Lecture . Lab . Homework . Office Hours and Ed . Quizzes and Exams . This course does not have a midterm. Instead . ",
    "url": "http://localhost:4000/su22/syllabus/#course-components",
    "relUrl": "/syllabus/#course-components"
  },"50": {
    "doc": "Syllabus",
    "title": "Policies",
    "content": "Grading . Here‚Äôs how we will calculate your final grade: . | Component | Weight | Notes | . | Participation | 15% | Participation in lecture, labs, and discussions | . | In-Class Quick Checks | 5% | Graded on completion, no drops | . | Weekly Surveys | 5% | Graded on completion, no drops | . | Homeworks | 40% | 5 homeworks with 1 homework drop (10% each) | . | Quizzes | 20% | 2 quizzes (10% each) | . | Final Exam | 15% | In-Class 8/12 | . Late Policy and Extensions . Academic Honesty . A Note on Letter Grades . ",
    "url": "http://localhost:4000/su22/syllabus/#policies",
    "relUrl": "/syllabus/#policies"
  },"51": {
    "doc": "Syllabus",
    "title": "Accommodations",
    "content": " ",
    "url": "http://localhost:4000/su22/syllabus/#accommodations",
    "relUrl": "/syllabus/#accommodations"
  },"52": {
    "doc": "Syllabus",
    "title": "Acknowledgements üôè",
    "content": "The Summer 2022 version of Data 6 is based on Data 94, created and taught by Suraj Rampure in Spring 2021 at UC Berkeley, and the Summer 2021 version of Data 6, taught by Ian Castro and Isaac Merritt. Data 6 and Data 94 are loosely based on Data C6, taught by Ian Castro in Summer 2020 at UC Berkeley, which in turn was based on Data 8R, taught by Henry Milner in Summer 2017, also at UC Berkeley. These classes were based on Data 8 at UC Berkeley. For Summer 2022, Professors Lisa Yan and Deborah Nolan have updated some of the curriculum and assignments, with help from Will Furtado, Kevin Miao and James Weichert. When creating Data 6, we‚Äôve referred to the materials of several other courses: . | Data 8, CS 10, and CS 61A at UC Berkeley | CS 106A at Stanford | CSE 160 at the University of Washington | . The website uses Just the Class. ",
    "url": "http://localhost:4000/su22/syllabus/#acknowledgements-",
    "relUrl": "/syllabus/#acknowledgements-"
  }
}
